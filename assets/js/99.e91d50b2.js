(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{391:function(t,e,a){"use strict";a.r(e);var r=a(10),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"数据驱动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据驱动"}},[t._v("#")]),t._v(" 数据驱动")]),t._v(" "),e("h2",{attrs:{id:"new-vue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new-vue"}},[t._v("#")]),t._v(" new Vue")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Vue 初始化主要就干了几件事情，\n合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化 data、props、computed、watcher 等等。\n")])])]),e("h2",{attrs:{id:"挂载的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#挂载的实现"}},[t._v("#")]),t._v(" 挂载的实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mountComponent 核心就是先实例化一个渲染Watcher，在它的回调函数中会调用 updateComponent 方法，\n在此方法中调用 vm._render 方法先生成虚拟 Node，最终调用 vm._update 更新 DOM\n")])])]),e("h2",{attrs:{id:"render"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#render"}},[t._v("#")]),t._v(" render")]),t._v(" "),e("p",[t._v("作用：渲染生成vnode")]),t._v(" "),e("h2",{attrs:{id:"createelement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#createelement"}},[t._v("#")]),t._v(" createElement")]),t._v(" "),e("p",[t._v("作用：render 就是使用 createElement生成vnode")]),t._v(" "),e("h2",{attrs:{id:"update"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[t._v("#")]),t._v(" update")]),t._v(" "),e("p",[t._v("作用：将vnode渲染成真实dom。")]),t._v(" "),e("h2",{attrs:{id:"组件化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),e("h3",{attrs:{id:"createcomponent"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#createcomponent"}},[t._v("#")]),t._v(" createComponent")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("渲染一个原生组件，它在渲染一个组件的时候的 3 个关键逻辑：构造子类构造函数，安装组件钩子函数和实例化 vnode。\ncreateComponent 后返回的是组件 vnode，它也一样走到 vm._update 方法，进而执行了 patch 函数\n")])])]),e("h3",{attrs:{id:"patch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[t._v("#")]),t._v(" patch")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("为什么要patch\n为了减少dom操作带来的性能损耗，所以就使用一个diff算法去比较元素之前后现在的区别。只改变发生变化的元素。没有发生变化的就不修改。")])]),t._v(" "),e("li",[e("p",[t._v("where\n作用目标是vnode")])]),t._v(" "),e("li",[e("p",[t._v("what 具体是如何工作的\n所用的diff算法来源于snabbdom，render 函数会生成vnode。")])]),t._v(" "),e("li",[e("p",[t._v("when\n当数据发生变化的时候就会发生触发，")])]),t._v(" "),e("li",[e("p",[t._v("工作原理")])])]),t._v(" "),e("h3",{attrs:{id:"合并配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并配置"}},[t._v("#")]),t._v(" 合并配置")])])}),[],!1,null,null,null);e.default=s.exports}}]);